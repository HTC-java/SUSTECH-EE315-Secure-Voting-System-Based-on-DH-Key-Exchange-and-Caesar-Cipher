简易投票协议规范（Simple Voting Protocol Specification）​
1. 概述​
1.1 目的​
本协议定义基于 TCP 传输层的客户端 - 服务器投票交互规则，涵盖身份认证（DH 密钥交换）、候选人列表传输、选票提交、投票结果计算与广播等流程，通过凯撒加密、校验和机制保障数据安全性与完整性，确保投票过程有序、可靠。​
1.2 适用范围​
适用于单服务器与多客户端的简易投票场景，支持最多 16 个客户端并发连接（基于服务器listen(16)配置），仅依赖 Python 3.x 标准库实现，无额外第三方依赖。​
1.3 术语定义​
服务器（Server）：维护候选人列表（默认Bob、Alice）、管理投票状态、通过 DH 密钥交换与客户端完成身份认证、接收并校验选票、计算投票结果并向所有客户端广播的实体。​
客户端（Client）：通过 DH 密钥交换完成身份认证、接收并解析服务器发送的候选人列表、提交选票、接收投票结果的参与实体。​
DH 密钥交换（Diffie-Hellman Key Exchange）：客户端与服务器生成公私钥对（私钥范围 1-100，公钥基于p=23、g=5计算），协商共享密钥（作为凯撒加密偏移量，范围 0-25）的身份认证机制。​
凯撒加密（Caesar Cipher）：基于共享密钥（偏移量）对文本进行加密的对称加密算法，仅对字母字符处理，非字母字符保持不变。​
校验和（Checksum）：通过计算消息前 3 个字符的 ASCII 码之和对 100 取余生成，用于验证消息完整性，格式为两位校验和_原始消息。​
候选人列表消息（OPTIONS）：服务器向客户端发送的包含候选人信息的消息标识。​
选票消息（VOTE）：客户端向服务器提交所选候选人的消息标识。​
投票结果消息（VOTE_RESULTS）：服务器向所有客户端广播投票结果的消息标识。​
结束标识（END）：标记消息结尾的关键字，用于客户端 / 服务器解析消息边界。​
确认消息（ACK）：告知发送方消息已成功接收或验证通过的响应标识。​
否定确认消息（NACK）：告知发送方消息接收失败或验证不通过的响应标识。​
投票结束状态（voting_ended）：由服务器通过 “用户按回车” 触发的状态标识，触发后服务器停止接收选票并广播结果。​
2. 消息格式​
所有消息均为文本格式，消息结尾以关键字END标识，字段分隔符、加密规则、校验和格式遵循以下定义，传输时需先添加校验和再进行凯撒加密（身份认证阶段的公钥传输除外）。​
2.1 DH 密钥交换相关消息（双向）​
2.1.1 公钥传输消息​
发送方：客户端→服务器（客户端公钥）、服务器→客户端（服务器公钥）​
格式：纯数字字符串（无加密、无校验和）​
示例：客户端发送15（客户端公钥）、服务器发送8（服务器公钥）​
2.1.2 挑战响应消息​
发送方：服务器→客户端（加密挑战）、客户端→服务器（解密后的挑战）​
加密挑战格式：AUTH_四位随机数（经凯撒加密）​
解密挑战格式：AUTH_四位随机数（原始文本，无加密）​
示例：服务器发送加密后的FZXJ_3579（原始挑战AUTH_3579，偏移量 5）、客户端发送AUTH_3579​
2.2 候选人列表消息（Server → Client）​
类型标识：OPTIONS​
原始消息格式：OPTIONS\r\nCandidate: <候选人1>\r\nCandidate: <候选人2>\r\n...\r\nEND​
添加校验和后格式：两位校验和_OPTIONS\r\nCandidate: <候选人1>\r\nCandidate: <候选人2>\r\n...\r\nEND​
加密后格式：经凯撒加密的 “校验和 + 原始消息” 字符串​
示例：原始消息OPTIONS\r\nCandidate: Bob\r\nCandidate: Alice\r\nEND，添加校验和（前 3 字符OPT的 ASCII 和为 79+80+84=243，243%100=43）后为43_OPTIONS\r\nCandidate: Bob\r\nCandidate: Alice\r\nEND，偏移量 5 加密后为TZYJW...（具体加密结果随偏移量变化）​
2.3 选票消息（Client → Server）​
类型标识：VOTE​
原始消息格式：VOTE: <所选候选人>\r\nEND​
添加校验和后格式：两位校验和_VOTE: <所选候选人>\r\nEND​
加密后格式：经凯撒加密的 “校验和 + 原始消息” 字符串​
示例：用户选择Alice，原始消息VOTE: Alice\r\nEND，添加校验和（前 3 字符VOT的 ASCII 和为 86+79+84=249，249%100=49）后为49_VOTE: Alice\r\nEND，偏移量 5 加密后为AZY...（具体加密结果随偏移量变化）​
2.4 投票结果消息（Server → Client）​
类型标识：VOTE_RESULTS​
原始消息格式：​
无投票时：VOTE_RESULTS\r\nStatus: No votes received\r\nTotal Votes: 0\r\nEND​
有投票时：VOTE_RESULTS\r\nTotal Votes: <总票数>\r\n--- Detailed Counts ---\r\n<候选人1>: <票数1> votes\r\n<候选人2>: <票数2> votes\r\n--- Winner(s) ---\r\nWinner: <获胜者1>, <获胜者2>...\r\nEND​
添加校验和后格式：两位校验和_原始结果消息​
加密后格式：经凯撒加密的 “校验和 + 原始消息” 字符串​
示例：Bob得 1 票、Alice得 2 票，原始消息VOTE_RESULTS\r\nTotal Votes: 3\r\n--- Detailed Counts ---\r\nBob: 1 votes\r\nAlice: 2 votes\r\n--- Winner(s) ---\r\nWinner: Alice\r\nEND，添加校验和后加密传输​
2.5 确认与否定确认消息（双向）​
确认消息（ACK）：纯文本字符串ACK（无加密、无校验和），用于确认公钥接收、身份认证通过、候选人列表接收、选票提交成功、结果接收等场景。​
否定确认消息（NACK）：纯文本字符串NACK（无加密、无校验和），用于告知选票校验失败、候选人无效等场景。
3.示例交互​
3.1 环境参数​
服务器候选人列表：Bob、Alice​
客户端私钥：10 → 客户端公钥：(5^10)%23 = 1024%23 = 10​
服务器私钥：8 → 服务器公钥：(5^8)%23 = 390625%23 = 16​
共享密钥：(16^10)%23%26 = 1099511627776%23=1 → 1%26=1（偏移量 1）​
服务器挑战：AUTH_7890​
3.2 交互过程​
客户端→服务器：客户端公钥10
服务器→客户端：ACK​
服务器→客户端：服务器公钥16​
客户端→服务器：ACK​
服务器→客户端：加密挑战（AUTH_7890偏移 1 加密为BVUI_8901）​
客户端→服务器：解密后的挑战AUTH_7890​
服务器→客户端：ACK（身份认证成功）​
服务器→客户端：加密的候选人列表（原始消息OPTIONS\r\nCandidate: Bob\r\nCandidate: Alice\r\nEND，校验和43，加密后为44_PQPTJT...）​
客户端→服务器：ACK​
客户端→服务器：加密的选票（用户选Alice，原始消息VOTE: Alice\r\nEND，校验和49，加密后为50_WP UF: Bmjdf\r\nFOE）​
服务器→客户端：ACK（选票提交成功）​
服务器操作：用户按回车，voting_ended=True，计算结果（假设仅该客户端投票，结果为Alice:1、Bob:0、总票数 1、获胜者Alice）​
服务器→客户端：加密的投票结果（原始消息含VOTE_RESULTS、详细得票等，校验和后加密）​
客户端：解密并验证结果，展示 “总票数 1、Alice:1 票、Bob:0 票、获胜者 Alice”​
服务器→客户端：关闭连接